/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_rocksdb_VectorColumnFamilyOptions */

#ifndef _Included_org_rocksdb_VectorColumnFamilyOptions
#define _Included_org_rocksdb_VectorColumnFamilyOptions
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    getVectorColumnFamilyOptionsFromProps
 * Signature: (JLjava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_getVectorColumnFamilyOptionsFromProps__JLjava_lang_String_2
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    getVectorColumnFamilyOptionsFromProps
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_getVectorColumnFamilyOptionsFromProps__Ljava_lang_String_2
  (JNIEnv *, jclass, jstring);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    newVectorColumnFamilyOptions
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_newVectorColumnFamilyOptions
  (JNIEnv *, jclass);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    copyColumnFamilyOptions
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_copyColumnFamilyOptions
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    copyVectorColumnFamilyOptions
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_copyVectorColumnFamilyOptions
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    newVectorColumnFamilyOptionsFromOptions
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_newVectorColumnFamilyOptionsFromOptions
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    disposeInternal
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_disposeInternal
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setMaxElements
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setMaxElements
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    maxElements
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_maxElements
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setM
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setM
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    M
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_M
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setEfConstruction
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setEfConstruction
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    efConstruction
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_efConstruction
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setRandomSeed
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setRandomSeed
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    randomSeed
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_randomSeed
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setVisitListPoolSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setVisitListPoolSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    visitListPoolSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_visitListPoolSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setTerminationThreshold
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setTerminationThreshold
  (JNIEnv *, jobject, jlong, jfloat);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    terminationThreshold
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_terminationThreshold
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setTerminationWeight
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setTerminationWeight
  (JNIEnv *, jobject, jlong, jfloat);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    terminationWeight
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_terminationWeight
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setTerminationLowerBound
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setTerminationLowerBound
  (JNIEnv *, jobject, jlong, jfloat);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    terminationLowerBound
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_terminationLowerBound
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setDim
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setDim
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    dim
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_dim
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setSpace
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setSpace
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    space
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_space
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setAllowReplaceDeleted
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setAllowReplaceDeleted
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    allowReplaceDeleted
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_allowReplaceDeleted
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    oldDefaults
 * Signature: (JII)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_oldDefaults
  (JNIEnv *, jclass, jlong, jint, jint);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    optimizeForSmallDb
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_optimizeForSmallDb__J
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    optimizeForSmallDb
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_optimizeForSmallDb__JJ
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    optimizeForPointLookup
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_optimizeForPointLookup
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    optimizeLevelStyleCompaction
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_optimizeLevelStyleCompaction
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    optimizeUniversalStyleCompaction
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_optimizeUniversalStyleCompaction
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setComparatorHandle
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setComparatorHandle__JI
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setComparatorHandle
 * Signature: (JJB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setComparatorHandle__JJB
  (JNIEnv *, jobject, jlong, jlong, jbyte);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setMergeOperatorName
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setMergeOperatorName
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setMergeOperator
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setMergeOperator
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setCompactionFilterHandle
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setCompactionFilterHandle
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setCompactionFilterFactoryHandle
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setCompactionFilterFactoryHandle
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setWriteBufferSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setWriteBufferSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    writeBufferSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_writeBufferSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setMaxWriteBufferNumber
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setMaxWriteBufferNumber
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    maxWriteBufferNumber
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_maxWriteBufferNumber
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setMinWriteBufferNumberToMerge
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setMinWriteBufferNumberToMerge
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    minWriteBufferNumberToMerge
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_minWriteBufferNumberToMerge
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setCompressionType
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setCompressionType
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    compressionType
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_compressionType
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setCompressionPerLevel
 * Signature: (J[B)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setCompressionPerLevel
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    compressionPerLevel
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_compressionPerLevel
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setBottommostCompressionType
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setBottommostCompressionType
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    bottommostCompressionType
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_bottommostCompressionType
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setBottommostCompressionOptions
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setBottommostCompressionOptions
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setCompressionOptions
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setCompressionOptions
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    useFixedLengthPrefixExtractor
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_useFixedLengthPrefixExtractor
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    useCappedPrefixExtractor
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_useCappedPrefixExtractor
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setNumLevels
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setNumLevels
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    numLevels
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_numLevels
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setLevelZeroFileNumCompactionTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setLevelZeroFileNumCompactionTrigger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    levelZeroFileNumCompactionTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_levelZeroFileNumCompactionTrigger
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setLevelZeroSlowdownWritesTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setLevelZeroSlowdownWritesTrigger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    levelZeroSlowdownWritesTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_levelZeroSlowdownWritesTrigger
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setLevelZeroStopWritesTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setLevelZeroStopWritesTrigger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    levelZeroStopWritesTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_levelZeroStopWritesTrigger
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setTargetFileSizeBase
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setTargetFileSizeBase
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    targetFileSizeBase
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_targetFileSizeBase
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setTargetFileSizeMultiplier
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setTargetFileSizeMultiplier
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    targetFileSizeMultiplier
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_targetFileSizeMultiplier
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setMaxBytesForLevelBase
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setMaxBytesForLevelBase
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    maxBytesForLevelBase
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_maxBytesForLevelBase
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setLevelCompactionDynamicLevelBytes
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setLevelCompactionDynamicLevelBytes
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    levelCompactionDynamicLevelBytes
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_levelCompactionDynamicLevelBytes
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setMaxBytesForLevelMultiplier
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setMaxBytesForLevelMultiplier
  (JNIEnv *, jobject, jlong, jdouble);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    maxBytesForLevelMultiplier
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_maxBytesForLevelMultiplier
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setMaxCompactionBytes
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setMaxCompactionBytes
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    maxCompactionBytes
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_maxCompactionBytes
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setArenaBlockSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setArenaBlockSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    arenaBlockSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_arenaBlockSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setDisableAutoCompactions
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setDisableAutoCompactions
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    disableAutoCompactions
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_disableAutoCompactions
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setCompactionStyle
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setCompactionStyle
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    compactionStyle
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_compactionStyle
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setMaxTableFilesSizeFIFO
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setMaxTableFilesSizeFIFO
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    maxTableFilesSizeFIFO
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_maxTableFilesSizeFIFO
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setMaxSequentialSkipInIterations
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setMaxSequentialSkipInIterations
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    maxSequentialSkipInIterations
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_maxSequentialSkipInIterations
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setMemTableFactory
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setMemTableFactory
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    memTableFactoryName
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_memTableFactoryName
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setTableFactory
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setTableFactory
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    tableFactoryName
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_tableFactoryName
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setCfPaths
 * Signature: (J[Ljava/lang/String;[J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setCfPaths
  (JNIEnv *, jclass, jlong, jobjectArray, jlongArray);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    cfPathsLen
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_cfPathsLen
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    cfPaths
 * Signature: (J[Ljava/lang/String;[J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_cfPaths
  (JNIEnv *, jclass, jlong, jobjectArray, jlongArray);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setInplaceUpdateSupport
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setInplaceUpdateSupport
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    inplaceUpdateSupport
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_inplaceUpdateSupport
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setInplaceUpdateNumLocks
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setInplaceUpdateNumLocks
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    inplaceUpdateNumLocks
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_inplaceUpdateNumLocks
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setMemtablePrefixBloomSizeRatio
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setMemtablePrefixBloomSizeRatio
  (JNIEnv *, jobject, jlong, jdouble);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    memtablePrefixBloomSizeRatio
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_memtablePrefixBloomSizeRatio
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setExperimentalMempurgeThreshold
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setExperimentalMempurgeThreshold
  (JNIEnv *, jobject, jlong, jdouble);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    experimentalMempurgeThreshold
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_experimentalMempurgeThreshold
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setMemtableWholeKeyFiltering
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setMemtableWholeKeyFiltering
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    memtableWholeKeyFiltering
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_memtableWholeKeyFiltering
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setBloomLocality
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setBloomLocality
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    bloomLocality
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_bloomLocality
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setMaxSuccessiveMerges
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setMaxSuccessiveMerges
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    maxSuccessiveMerges
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_maxSuccessiveMerges
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setOptimizeFiltersForHits
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setOptimizeFiltersForHits
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    optimizeFiltersForHits
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_optimizeFiltersForHits
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setMemtableHugePageSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setMemtableHugePageSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    memtableHugePageSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_memtableHugePageSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setSoftPendingCompactionBytesLimit
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setSoftPendingCompactionBytesLimit
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    softPendingCompactionBytesLimit
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_softPendingCompactionBytesLimit
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setHardPendingCompactionBytesLimit
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setHardPendingCompactionBytesLimit
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    hardPendingCompactionBytesLimit
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_hardPendingCompactionBytesLimit
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setLevel0FileNumCompactionTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setLevel0FileNumCompactionTrigger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    level0FileNumCompactionTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_level0FileNumCompactionTrigger
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setLevel0SlowdownWritesTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setLevel0SlowdownWritesTrigger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    level0SlowdownWritesTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_level0SlowdownWritesTrigger
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setLevel0StopWritesTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setLevel0StopWritesTrigger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    level0StopWritesTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_level0StopWritesTrigger
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setMaxBytesForLevelMultiplierAdditional
 * Signature: (J[I)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setMaxBytesForLevelMultiplierAdditional
  (JNIEnv *, jobject, jlong, jintArray);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    maxBytesForLevelMultiplierAdditional
 * Signature: (J)[I
 */
JNIEXPORT jintArray JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_maxBytesForLevelMultiplierAdditional
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setParanoidFileChecks
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setParanoidFileChecks
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    paranoidFileChecks
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_paranoidFileChecks
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setMaxWriteBufferNumberToMaintain
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setMaxWriteBufferNumberToMaintain
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    maxWriteBufferNumberToMaintain
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_maxWriteBufferNumberToMaintain
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setCompactionPriority
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setCompactionPriority
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    compactionPriority
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_compactionPriority
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setReportBgIoStats
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setReportBgIoStats
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    reportBgIoStats
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_reportBgIoStats
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setTtl
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setTtl
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    ttl
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_ttl
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setPeriodicCompactionSeconds
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setPeriodicCompactionSeconds
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    periodicCompactionSeconds
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_periodicCompactionSeconds
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setCompactionOptionsUniversal
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setCompactionOptionsUniversal
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setCompactionOptionsFIFO
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setCompactionOptionsFIFO
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setForceConsistencyChecks
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setForceConsistencyChecks
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    forceConsistencyChecks
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_forceConsistencyChecks
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setSstPartitionerFactory
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setSstPartitionerFactory
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setCompactionThreadLimiter
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setCompactionThreadLimiter
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setEnableBlobFiles
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setEnableBlobFiles
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    enableBlobFiles
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_enableBlobFiles
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setMinBlobSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setMinBlobSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    minBlobSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_minBlobSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setBlobFileSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setBlobFileSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    blobFileSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_blobFileSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setBlobCompressionType
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setBlobCompressionType
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    blobCompressionType
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_blobCompressionType
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setEnableBlobGarbageCollection
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setEnableBlobGarbageCollection
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    enableBlobGarbageCollection
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_enableBlobGarbageCollection
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setBlobGarbageCollectionAgeCutoff
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setBlobGarbageCollectionAgeCutoff
  (JNIEnv *, jobject, jlong, jdouble);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    blobGarbageCollectionAgeCutoff
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_blobGarbageCollectionAgeCutoff
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setBlobGarbageCollectionForceThreshold
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setBlobGarbageCollectionForceThreshold
  (JNIEnv *, jobject, jlong, jdouble);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    blobGarbageCollectionForceThreshold
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_blobGarbageCollectionForceThreshold
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setBlobCompactionReadaheadSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setBlobCompactionReadaheadSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    blobCompactionReadaheadSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_blobCompactionReadaheadSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setBlobFileStartingLevel
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setBlobFileStartingLevel
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    blobFileStartingLevel
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_blobFileStartingLevel
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setPrepopulateBlobCache
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setPrepopulateBlobCache
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    prepopulateBlobCache
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_prepopulateBlobCache
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    setFlushThreshold
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_setFlushThreshold
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorColumnFamilyOptions
 * Method:    flushThreshold
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorColumnFamilyOptions_flushThreshold
  (JNIEnv *, jobject, jlong);

#ifdef __cplusplus
}
#endif
#endif
