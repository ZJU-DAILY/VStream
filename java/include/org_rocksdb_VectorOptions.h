/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_rocksdb_VectorOptions */

#ifndef _Included_org_rocksdb_VectorOptions
#define _Included_org_rocksdb_VectorOptions
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    newVectorOptions
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_newVectorOptions__
  (JNIEnv *, jclass);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    newVectorOptions
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_newVectorOptions__JJ
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    copyVectorOptions
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_copyVectorOptions
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxWriteBatchGroupSizeBytes
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxWriteBatchGroupSizeBytes
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxWriteBatchGroupSizeBytes
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_maxWriteBatchGroupSizeBytes
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setEventListeners
 * Signature: (J[J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setEventListeners
  (JNIEnv *, jclass, jlong, jlongArray);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    eventListeners
 * Signature: (J)[Lorg/rocksdb/AbstractEventListener;
 */
JNIEXPORT jobjectArray JNICALL Java_org_rocksdb_VectorOptions_eventListeners
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setSkipCheckingSstFileSizesOnDbOpen
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setSkipCheckingSstFileSizesOnDbOpen
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    skipCheckingSstFileSizesOnDbOpen
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_skipCheckingSstFileSizesOnDbOpen
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    optimizeForSmallDb
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_optimizeForSmallDb__JJ
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setCfPaths
 * Signature: (J[Ljava/lang/String;[J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setCfPaths
  (JNIEnv *, jclass, jlong, jobjectArray, jlongArray);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    cfPathsLen
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_cfPathsLen
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    cfPaths
 * Signature: (J[Ljava/lang/String;[J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_cfPaths
  (JNIEnv *, jclass, jlong, jobjectArray, jlongArray);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setCompactionThreadLimiter
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setCompactionThreadLimiter
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setAvoidUnnecessaryBlockingIO
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setAvoidUnnecessaryBlockingIO
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    avoidUnnecessaryBlockingIO
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_avoidUnnecessaryBlockingIO
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setPersistStatsToDisk
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setPersistStatsToDisk
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    persistStatsToDisk
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_persistStatsToDisk
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setWriteDbidToManifest
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setWriteDbidToManifest
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    writeDbidToManifest
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_writeDbidToManifest
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setLogReadaheadSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setLogReadaheadSize
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    logReadaheadSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_logReadaheadSize
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setBestEffortsRecovery
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setBestEffortsRecovery
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    bestEffortsRecovery
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_bestEffortsRecovery
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxBgErrorResumeCount
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxBgErrorResumeCount
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxBgerrorResumeCount
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_maxBgerrorResumeCount
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setBgerrorResumeRetryInterval
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setBgerrorResumeRetryInterval
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    bgerrorResumeRetryInterval
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_bgerrorResumeRetryInterval
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    disposeInternal
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_disposeInternal
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setEnv
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setEnv
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setIncreaseParallelism
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setIncreaseParallelism
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setCreateIfMissing
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setCreateIfMissing
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    createIfMissing
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_createIfMissing
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setCreateMissingColumnFamilies
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setCreateMissingColumnFamilies
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    createMissingColumnFamilies
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_createMissingColumnFamilies
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setErrorIfExists
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setErrorIfExists
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    errorIfExists
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_errorIfExists
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setParanoidChecks
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setParanoidChecks
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    paranoidChecks
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_paranoidChecks
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setRateLimiter
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setRateLimiter
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setSstFileManager
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setSstFileManager
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setLogger
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setLogger
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setInfoLogLevel
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setInfoLogLevel
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    infoLogLevel
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_VectorOptions_infoLogLevel
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxOpenFiles
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxOpenFiles
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxOpenFiles
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_maxOpenFiles
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxTotalWalSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxTotalWalSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxFileOpeningThreads
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxFileOpeningThreads
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxFileOpeningThreads
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_maxFileOpeningThreads
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxTotalWalSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_maxTotalWalSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setStatistics
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setStatistics
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    statistics
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_statistics
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    useFsync
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_useFsync
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setUseFsync
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setUseFsync
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setDbPaths
 * Signature: (J[Ljava/lang/String;[J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setDbPaths
  (JNIEnv *, jobject, jlong, jobjectArray, jlongArray);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    dbPathsLen
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_dbPathsLen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    dbPaths
 * Signature: (J[Ljava/lang/String;[J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_dbPaths
  (JNIEnv *, jobject, jlong, jobjectArray, jlongArray);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setDbLogDir
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setDbLogDir
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    dbLogDir
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_rocksdb_VectorOptions_dbLogDir
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setWalDir
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setWalDir
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    walDir
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_rocksdb_VectorOptions_walDir
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setDeleteObsoleteFilesPeriodMicros
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setDeleteObsoleteFilesPeriodMicros
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    deleteObsoleteFilesPeriodMicros
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_deleteObsoleteFilesPeriodMicros
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxBackgroundCompactions
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxBackgroundCompactions
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxBackgroundCompactions
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_maxBackgroundCompactions
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxSubcompactions
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxSubcompactions
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxSubcompactions
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_maxSubcompactions
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxBackgroundFlushes
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxBackgroundFlushes
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxBackgroundFlushes
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_maxBackgroundFlushes
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxBackgroundJobs
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxBackgroundJobs
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxBackgroundJobs
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_maxBackgroundJobs
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxLogFileSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxLogFileSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxLogFileSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_maxLogFileSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setLogFileTimeToRoll
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setLogFileTimeToRoll
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    logFileTimeToRoll
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_logFileTimeToRoll
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setKeepLogFileNum
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setKeepLogFileNum
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    keepLogFileNum
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_keepLogFileNum
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setRecycleLogFileNum
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setRecycleLogFileNum
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    recycleLogFileNum
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_recycleLogFileNum
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxManifestFileSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxManifestFileSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxManifestFileSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_maxManifestFileSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxTableFilesSizeFIFO
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxTableFilesSizeFIFO
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxTableFilesSizeFIFO
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_maxTableFilesSizeFIFO
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setTableCacheNumshardbits
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setTableCacheNumshardbits
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    tableCacheNumshardbits
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_tableCacheNumshardbits
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setWalTtlSeconds
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setWalTtlSeconds
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    walTtlSeconds
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_walTtlSeconds
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setWalSizeLimitMB
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setWalSizeLimitMB
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    walSizeLimitMB
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_walSizeLimitMB
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setManifestPreallocationSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setManifestPreallocationSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    manifestPreallocationSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_manifestPreallocationSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setUseDirectReads
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setUseDirectReads
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    useDirectReads
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_useDirectReads
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setUseDirectIoForFlushAndCompaction
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setUseDirectIoForFlushAndCompaction
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    useDirectIoForFlushAndCompaction
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_useDirectIoForFlushAndCompaction
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setAllowFAllocate
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setAllowFAllocate
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    allowFAllocate
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_allowFAllocate
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setAllowMmapReads
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setAllowMmapReads
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    allowMmapReads
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_allowMmapReads
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setAllowMmapWrites
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setAllowMmapWrites
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    allowMmapWrites
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_allowMmapWrites
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setIsFdCloseOnExec
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setIsFdCloseOnExec
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    isFdCloseOnExec
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_isFdCloseOnExec
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setStatsDumpPeriodSec
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setStatsDumpPeriodSec
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    statsDumpPeriodSec
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_statsDumpPeriodSec
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setStatsPersistPeriodSec
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setStatsPersistPeriodSec
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    statsPersistPeriodSec
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_statsPersistPeriodSec
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setStatsHistoryBufferSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setStatsHistoryBufferSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    statsHistoryBufferSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_statsHistoryBufferSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setAdviseRandomOnOpen
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setAdviseRandomOnOpen
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    adviseRandomOnOpen
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_adviseRandomOnOpen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setDbWriteBufferSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setDbWriteBufferSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setWriteBufferManager
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setWriteBufferManager
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    dbWriteBufferSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_dbWriteBufferSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setAccessHintOnCompactionStart
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setAccessHintOnCompactionStart
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    accessHintOnCompactionStart
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_VectorOptions_accessHintOnCompactionStart
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setCompactionReadaheadSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setCompactionReadaheadSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    compactionReadaheadSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_compactionReadaheadSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setRandomAccessMaxBufferSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setRandomAccessMaxBufferSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    randomAccessMaxBufferSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_randomAccessMaxBufferSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setWritableFileMaxBufferSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setWritableFileMaxBufferSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    writableFileMaxBufferSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_writableFileMaxBufferSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setUseAdaptiveMutex
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setUseAdaptiveMutex
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    useAdaptiveMutex
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_useAdaptiveMutex
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setBytesPerSync
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setBytesPerSync
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    bytesPerSync
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_bytesPerSync
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setWalBytesPerSync
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setWalBytesPerSync
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    walBytesPerSync
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_walBytesPerSync
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setStrictBytesPerSync
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setStrictBytesPerSync
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    strictBytesPerSync
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_strictBytesPerSync
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setEnableThreadTracking
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setEnableThreadTracking
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    enableThreadTracking
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_enableThreadTracking
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setDelayedWriteRate
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setDelayedWriteRate
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    delayedWriteRate
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_delayedWriteRate
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setEnablePipelinedWrite
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setEnablePipelinedWrite
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    enablePipelinedWrite
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_enablePipelinedWrite
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setUnorderedWrite
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setUnorderedWrite
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    unorderedWrite
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_unorderedWrite
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setAllowConcurrentMemtableWrite
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setAllowConcurrentMemtableWrite
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    allowConcurrentMemtableWrite
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_allowConcurrentMemtableWrite
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setEnableWriteThreadAdaptiveYield
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setEnableWriteThreadAdaptiveYield
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    enableWriteThreadAdaptiveYield
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_enableWriteThreadAdaptiveYield
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setWriteThreadMaxYieldUsec
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setWriteThreadMaxYieldUsec
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    writeThreadMaxYieldUsec
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_writeThreadMaxYieldUsec
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setWriteThreadSlowYieldUsec
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setWriteThreadSlowYieldUsec
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    writeThreadSlowYieldUsec
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_writeThreadSlowYieldUsec
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setSkipStatsUpdateOnDbOpen
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setSkipStatsUpdateOnDbOpen
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    skipStatsUpdateOnDbOpen
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_skipStatsUpdateOnDbOpen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setWalRecoveryMode
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setWalRecoveryMode
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    walRecoveryMode
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_VectorOptions_walRecoveryMode
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setAllow2pc
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setAllow2pc
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    allow2pc
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_allow2pc
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setRowCache
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setRowCache
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setWalFilter
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setWalFilter
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setFailIfOptionsFileError
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setFailIfOptionsFileError
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    failIfOptionsFileError
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_failIfOptionsFileError
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setDumpMallocStats
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setDumpMallocStats
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    dumpMallocStats
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_dumpMallocStats
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setAvoidFlushDuringRecovery
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setAvoidFlushDuringRecovery
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    avoidFlushDuringRecovery
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_avoidFlushDuringRecovery
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setAvoidFlushDuringShutdown
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setAvoidFlushDuringShutdown
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    avoidFlushDuringShutdown
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_avoidFlushDuringShutdown
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setAllowIngestBehind
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setAllowIngestBehind
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    allowIngestBehind
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_allowIngestBehind
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setTwoWriteQueues
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setTwoWriteQueues
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    twoWriteQueues
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_twoWriteQueues
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setManualWalFlush
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setManualWalFlush
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    manualWalFlush
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_manualWalFlush
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    optimizeForSmallDb
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_optimizeForSmallDb__J
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    optimizeForPointLookup
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_optimizeForPointLookup
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    optimizeLevelStyleCompaction
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_optimizeLevelStyleCompaction
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    optimizeUniversalStyleCompaction
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_optimizeUniversalStyleCompaction
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setComparatorHandle
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setComparatorHandle__JI
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setComparatorHandle
 * Signature: (JJB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setComparatorHandle__JJB
  (JNIEnv *, jobject, jlong, jlong, jbyte);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMergeOperatorName
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMergeOperatorName
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMergeOperator
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMergeOperator
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setCompactionFilterHandle
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setCompactionFilterHandle
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setCompactionFilterFactoryHandle
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setCompactionFilterFactoryHandle
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setWriteBufferSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setWriteBufferSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    writeBufferSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_writeBufferSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxWriteBufferNumber
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxWriteBufferNumber
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxWriteBufferNumber
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_maxWriteBufferNumber
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMinWriteBufferNumberToMerge
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMinWriteBufferNumberToMerge
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    minWriteBufferNumberToMerge
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_minWriteBufferNumberToMerge
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setCompressionType
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setCompressionType
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    compressionType
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_VectorOptions_compressionType
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setCompressionPerLevel
 * Signature: (J[B)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setCompressionPerLevel
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    compressionPerLevel
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_org_rocksdb_VectorOptions_compressionPerLevel
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setBottommostCompressionType
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setBottommostCompressionType
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    bottommostCompressionType
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_VectorOptions_bottommostCompressionType
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setBottommostCompressionOptions
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setBottommostCompressionOptions
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setCompressionOptions
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setCompressionOptions
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    useFixedLengthPrefixExtractor
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_useFixedLengthPrefixExtractor
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    useCappedPrefixExtractor
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_useCappedPrefixExtractor
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setNumLevels
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setNumLevels
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    numLevels
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_numLevels
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setLevelZeroFileNumCompactionTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setLevelZeroFileNumCompactionTrigger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    levelZeroFileNumCompactionTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_levelZeroFileNumCompactionTrigger
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setLevelZeroSlowdownWritesTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setLevelZeroSlowdownWritesTrigger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    levelZeroSlowdownWritesTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_levelZeroSlowdownWritesTrigger
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setLevelZeroStopWritesTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setLevelZeroStopWritesTrigger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    levelZeroStopWritesTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_levelZeroStopWritesTrigger
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setTargetFileSizeBase
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setTargetFileSizeBase
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    targetFileSizeBase
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_targetFileSizeBase
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setTargetFileSizeMultiplier
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setTargetFileSizeMultiplier
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    targetFileSizeMultiplier
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_targetFileSizeMultiplier
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxBytesForLevelBase
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxBytesForLevelBase
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxBytesForLevelBase
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_maxBytesForLevelBase
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setLevelCompactionDynamicLevelBytes
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setLevelCompactionDynamicLevelBytes
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    levelCompactionDynamicLevelBytes
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_levelCompactionDynamicLevelBytes
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxBytesForLevelMultiplier
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxBytesForLevelMultiplier
  (JNIEnv *, jobject, jlong, jdouble);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxBytesForLevelMultiplier
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_rocksdb_VectorOptions_maxBytesForLevelMultiplier
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxCompactionBytes
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxCompactionBytes
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxCompactionBytes
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_maxCompactionBytes
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setArenaBlockSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setArenaBlockSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    arenaBlockSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_arenaBlockSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setDisableAutoCompactions
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setDisableAutoCompactions
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    disableAutoCompactions
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_disableAutoCompactions
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setCompactionStyle
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setCompactionStyle
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    compactionStyle
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_VectorOptions_compactionStyle
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxSequentialSkipInIterations
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxSequentialSkipInIterations
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxSequentialSkipInIterations
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_maxSequentialSkipInIterations
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMemTableFactory
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMemTableFactory
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    memTableFactoryName
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_rocksdb_VectorOptions_memTableFactoryName
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setTableFactory
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setTableFactory
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    tableFactoryName
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_rocksdb_VectorOptions_tableFactoryName
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setInplaceUpdateSupport
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setInplaceUpdateSupport
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    inplaceUpdateSupport
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_inplaceUpdateSupport
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setInplaceUpdateNumLocks
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setInplaceUpdateNumLocks
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    inplaceUpdateNumLocks
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_inplaceUpdateNumLocks
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMemtablePrefixBloomSizeRatio
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMemtablePrefixBloomSizeRatio
  (JNIEnv *, jobject, jlong, jdouble);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    memtablePrefixBloomSizeRatio
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_rocksdb_VectorOptions_memtablePrefixBloomSizeRatio
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setExperimentalMempurgeThreshold
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setExperimentalMempurgeThreshold
  (JNIEnv *, jobject, jlong, jdouble);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    experimentalMempurgeThreshold
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_rocksdb_VectorOptions_experimentalMempurgeThreshold
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMemtableWholeKeyFiltering
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMemtableWholeKeyFiltering
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    memtableWholeKeyFiltering
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_memtableWholeKeyFiltering
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setBloomLocality
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setBloomLocality
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    bloomLocality
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_bloomLocality
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxSuccessiveMerges
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxSuccessiveMerges
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxSuccessiveMerges
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_maxSuccessiveMerges
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setOptimizeFiltersForHits
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setOptimizeFiltersForHits
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    optimizeFiltersForHits
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_optimizeFiltersForHits
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMemtableHugePageSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMemtableHugePageSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    memtableHugePageSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_memtableHugePageSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setSoftPendingCompactionBytesLimit
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setSoftPendingCompactionBytesLimit
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    softPendingCompactionBytesLimit
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_softPendingCompactionBytesLimit
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setHardPendingCompactionBytesLimit
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setHardPendingCompactionBytesLimit
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    hardPendingCompactionBytesLimit
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_hardPendingCompactionBytesLimit
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setLevel0FileNumCompactionTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setLevel0FileNumCompactionTrigger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    level0FileNumCompactionTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_level0FileNumCompactionTrigger
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setLevel0SlowdownWritesTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setLevel0SlowdownWritesTrigger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    level0SlowdownWritesTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_level0SlowdownWritesTrigger
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setLevel0StopWritesTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setLevel0StopWritesTrigger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    level0StopWritesTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_level0StopWritesTrigger
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxBytesForLevelMultiplierAdditional
 * Signature: (J[I)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxBytesForLevelMultiplierAdditional
  (JNIEnv *, jobject, jlong, jintArray);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxBytesForLevelMultiplierAdditional
 * Signature: (J)[I
 */
JNIEXPORT jintArray JNICALL Java_org_rocksdb_VectorOptions_maxBytesForLevelMultiplierAdditional
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setParanoidFileChecks
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setParanoidFileChecks
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    paranoidFileChecks
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_paranoidFileChecks
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxWriteBufferNumberToMaintain
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxWriteBufferNumberToMaintain
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxWriteBufferNumberToMaintain
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_maxWriteBufferNumberToMaintain
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setCompactionPriority
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setCompactionPriority
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    compactionPriority
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_VectorOptions_compactionPriority
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setReportBgIoStats
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setReportBgIoStats
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    reportBgIoStats
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_reportBgIoStats
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setTtl
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setTtl
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    ttl
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_ttl
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setPeriodicCompactionSeconds
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setPeriodicCompactionSeconds
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    periodicCompactionSeconds
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_periodicCompactionSeconds
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setCompactionOptionsUniversal
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setCompactionOptionsUniversal
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setCompactionOptionsFIFO
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setCompactionOptionsFIFO
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setForceConsistencyChecks
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setForceConsistencyChecks
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    forceConsistencyChecks
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_forceConsistencyChecks
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setAtomicFlush
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setAtomicFlush
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    atomicFlush
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_atomicFlush
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setSstPartitionerFactory
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setSstPartitionerFactory
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setEnableBlobFiles
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setEnableBlobFiles
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    enableBlobFiles
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_enableBlobFiles
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMinBlobSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMinBlobSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    minBlobSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_minBlobSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setBlobFileSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setBlobFileSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    blobFileSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_blobFileSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setBlobCompressionType
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setBlobCompressionType
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    blobCompressionType
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_VectorOptions_blobCompressionType
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setEnableBlobGarbageCollection
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setEnableBlobGarbageCollection
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    enableBlobGarbageCollection
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_enableBlobGarbageCollection
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setBlobGarbageCollectionAgeCutoff
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setBlobGarbageCollectionAgeCutoff
  (JNIEnv *, jobject, jlong, jdouble);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    blobGarbageCollectionAgeCutoff
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_rocksdb_VectorOptions_blobGarbageCollectionAgeCutoff
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setBlobGarbageCollectionForceThreshold
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setBlobGarbageCollectionForceThreshold
  (JNIEnv *, jobject, jlong, jdouble);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    blobGarbageCollectionForceThreshold
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_rocksdb_VectorOptions_blobGarbageCollectionForceThreshold
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setBlobCompactionReadaheadSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setBlobCompactionReadaheadSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    blobCompactionReadaheadSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_blobCompactionReadaheadSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setBlobFileStartingLevel
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setBlobFileStartingLevel
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    blobFileStartingLevel
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_blobFileStartingLevel
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setPrepopulateBlobCache
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setPrepopulateBlobCache
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    prepopulateBlobCache
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_VectorOptions_prepopulateBlobCache
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setMaxElements
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setMaxElements
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    maxElements
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_maxElements
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setM
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setM
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    M
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_M
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setEfConstruction
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setEfConstruction
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    efConstruction
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_efConstruction
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setRandomSeed
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setRandomSeed
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    randomSeed
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_randomSeed
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setVisitListPoolSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setVisitListPoolSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    visitListPoolSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_visitListPoolSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setTerminationThreshold
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setTerminationThreshold
  (JNIEnv *, jobject, jlong, jfloat);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    terminationThreshold
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_org_rocksdb_VectorOptions_terminationThreshold
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setTerminationWeight
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setTerminationWeight
  (JNIEnv *, jobject, jlong, jfloat);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    terminationWeight
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_org_rocksdb_VectorOptions_terminationWeight
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setTerminationLowerBound
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setTerminationLowerBound
  (JNIEnv *, jobject, jlong, jfloat);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    terminationLowerBound
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_org_rocksdb_VectorOptions_terminationLowerBound
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setDim
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setDim
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    dim
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_rocksdb_VectorOptions_dim
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setSpace
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setSpace
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    space
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_rocksdb_VectorOptions_space
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setAllowReplaceDeleted
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setAllowReplaceDeleted
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    allowReplaceDeleted
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_rocksdb_VectorOptions_allowReplaceDeleted
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    setFlushThreshold
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_rocksdb_VectorOptions_setFlushThreshold
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_rocksdb_VectorOptions
 * Method:    flushThreshold
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_rocksdb_VectorOptions_flushThreshold
  (JNIEnv *, jobject, jlong);

#ifdef __cplusplus
}
#endif
#endif
